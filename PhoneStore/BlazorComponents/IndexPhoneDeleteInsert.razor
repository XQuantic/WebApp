@using PhoneStore.ViewModels
@inject IRepository Repository


@if (Phones is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <ul>
        @foreach (var item in Phones)
        {
            <li>@item.Company.Name - @item.Name - @item.Country - @item.Price$</li>
        }
    </ul>
    <div class="deleteForm">
        <EditForm Model="_deletePhone" OnValidSubmit="DeletePhone">
            <label>Name phone:</label>
            <InputText class="form-control" @bind-Value="_deletePhone.Name"></InputText>
            <input type="submit" class="btn btn-primary" value="Delete"/>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
        </EditForm>
    </div>

    <div class="insertPhone">
        <EditForm Model="_newPhone" OnValidSubmit="InsertPhone">
            <label>Name phone:</label>
            <InputText class="form-control" @bind-Value="_newPhone.Name"></InputText>
            <label>Country phone company:</label>
            <InputText class="form-control" @bind-Value="_newPhone.Country"></InputText>
            <label>Price:</label>
            <InputNumber class="form-control" @bind-Value="_newPhone.Price"></InputNumber>
            <label>Company:</label>
            <InputSelect class="form-control" @bind-Value="_newPhone.CompanyId">
                <option value="">Select company</option>
                @foreach (var item in Companies)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
            <input type="submit" class="btn btn-primary" value="Insert"/>
            <label>@ResultInfo</label>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
    </div>
}

@code {
    private List<Phone> Phones { get; set; }
    private List<Company> Companies { get; set; }
    private readonly InsertPhone _newPhone = new InsertPhone();
    private readonly DeletePhone _deletePhone = new DeletePhone();

    private string ResultInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Phones = await Repository.GetPhones();
        Companies = await Repository.GetCompanies();
    }

    private async Task DeletePhone()
    {
        Phone data = await Repository.GetPhone(_deletePhone.Name);
        if (data != null)
        {
            await Repository.RemovePhone(data);
            Phones = await Repository.GetPhones();
            _deletePhone.Name = "Successful delete";
        }
        else
        {
            _deletePhone.Name = "Data not found";
        }
    }

    private async Task InsertPhone()
    {
        Phone phone = new Phone {Name = _newPhone.Name, Country = _newPhone.Country, Price = _newPhone.Price, CompanyId = Convert.ToInt32(_newPhone.CompanyId)};
        await Repository.SavePhone(phone);
        Phones = await Repository.GetPhones();
        ResultInfo = "Insert complete";
    }
}
