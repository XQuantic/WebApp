@using PhoneStore.ViewModels
@using PhoneStore.Services
@inject IRepository Repository
@inject IPhoneService PhoneService


@if (Phones is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <ul>
            @foreach (var item in Phones)
            {
                <li>@item.Company.Name - @item.Name - @item.Country - @item.Price$</li>
            }
        </ul>
        <div class="pagesPhone">
            @for (int i = 1; i <= PagingInfo.TotalPages; i++)
            {
                int page = i;
                <a class="btn @(i == PagingInfo.CurrentPage ? "btn-primary" : "btn-secondary") m-1" @onclick="() => PagePhone(page)">@i</a>
            }
        </div>
    </div>
    <div class="deleteForm">
        <EditForm Model="_deletePhone" OnValidSubmit="DeletePhone">
            <DataAnnotationsValidator />
            <p>
                <label>Name phone:</label>
                <InputText class="form-control" @bind-Value="_deletePhone.Name"></InputText>
                <ValidationMessage For="() => _deletePhone.Name"></ValidationMessage>
            </p>
            <input type="submit" class="btn btn-primary" value="Delete" />
        </EditForm>
    </div>
    <div class="insertPhone">
        <EditForm Model="_newPhone" OnValidSubmit="InsertPhone">
            <DataAnnotationsValidator />
            <p>
                <label>Name phone:</label>
                <InputText class="form-control" @bind-Value="_newPhone.Name"></InputText>
                <ValidationMessage For="() => _newPhone.Name"></ValidationMessage>
            </p>
            <p>
                <label>Country phone company:</label>
                <InputText class="form-control" @bind-Value="_newPhone.Country"></InputText>
                <ValidationMessage For="() => _newPhone.Country"></ValidationMessage>
            </p>
            <p>
                <label>Price:</label>
                <InputNumber class="form-control" @bind-Value="_newPhone.Price"></InputNumber>
                <ValidationMessage For="() => _newPhone.Price"></ValidationMessage>
            </p>
            <p>
                <label>Company:</label>
                <InputSelect class="form-control" @bind-Value="_newPhone.CompanyId">
                    <option disabled selected value="">Select company</option>
                    @foreach (var item in Companies)
                        {
                        <option value="@item.Id">@item.Name</option>
                        }
                </InputSelect>
                <ValidationMessage For="@(() => _newPhone.CompanyId)"></ValidationMessage>
            </p>
            <input type="submit" class="btn btn-primary" value="Insert" />
            <label>@ResultInfo</label>
        </EditForm>
    </div>
}

@code {
    private List<Phone> Phones { get; set; }
    private List<Company> Companies { get; set; }
    private PagingInfo PagingInfo { get; set; }
    private readonly InsertPhone _newPhone = new InsertPhone();
    private readonly DeletePhone _deletePhone = new DeletePhone();

    private string ResultInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Phones = (await PhoneService.GetPhoneItems(1)).ToList();
        Companies = await Repository.GetCompanies();
        PagingInfo = await PhoneService.GetNumberOfPages(1);
    }

    private async Task DeletePhone()
    {
        Phone data = await Repository.GetPhone(_deletePhone.Name);
        if (data != null)
        {
            await Repository.RemovePhone(data);
            await PagePhone(PagingInfo.CurrentPage);
            _deletePhone.Name = "Successful delete";
        }
        else
        {
            _deletePhone.Name = "Data not found";
        }
    }

    private async Task InsertPhone()
    {
        Phone phone = new Phone { Name = _newPhone.Name, Country = _newPhone.Country, Price = _newPhone.Price, CompanyId = Convert.ToInt32(_newPhone.CompanyId) };
        await Repository.SavePhone(phone);
        await PagePhone(PagingInfo.CurrentPage);
        ResultInfo = "Insert complete";
    }

    private async Task PagePhone(int phonePage)
    {
        PagingInfo = await PhoneService.GetNumberOfPages(phonePage);
        if (phonePage > PagingInfo.TotalPages)
        {
            Phones = (await PhoneService.GetPhoneItems(phonePage - 1))
                .ToList();
            PagingInfo.CurrentPage = phonePage - 1;
        }
        else
        {
            Phones = (await PhoneService.GetPhoneItems(phonePage))
                .ToList();
        }
    }
}
